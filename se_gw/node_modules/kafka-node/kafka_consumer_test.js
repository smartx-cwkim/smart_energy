#!/usr/bin/env node

var kafka  = require('./kafka')
var topic = 'KafkaConnectivityTest'

var topics = [ { topic: topic } ]

var ZOOKEEPER_HOST=process.env.ZOOKEEPER_HOST || '192.168.99.100'

// var client = new kafka.Client(ZOOKEEPER_HOST +':2181', 'kafka-testing')
// var highLevelConsumer = new kafka.HighLevelConsumer(client, topics, {groupId: 'kafka.tester'})

var client2 = new kafka.Client(ZOOKEEPER_HOST +':2181', 'kafka-testing')
var highLevelConsumer2 = new kafka.HighLevelConsumer(client2, [{topic:'ProducerConnectivityTest'}], {
	groupId: 'kafka.tester',
	fetchMaxBytes: 1024
})

function onError(error){
	console.error('an error happened', error, error.stack)
	console.trace()
}

var messages = 0
highLevelConsumer2.on('error', onError)
highLevelConsumer2.on('done', () => console.log('done',messages))
highLevelConsumer2.on('message', function(message){
	console.log('consumer2 message', message)
	messages++
	highLevelConsumer2.pause()
})

// highLevelConsumer.on('error', onError)
// highLevelConsumer.on('done', () => console.log('done'))
// highLevelConsumer.on('message', function(message){
// 	console.log('received message', message)
// 	highLevelConsumer.pause()
// })

process.on('uncaughtException', function(err) {
    // handle the error safely
    console.error('uncaughtException', err)
    console.log(err.stack)
})

process.on('SIGINT', function() {
	console.log("Caught interrupt signal");
	highLevelConsumer2.commit(false, function(){
		highLevelConsumer2.removeListener('error', onError)
		highLevelConsumer2.close(false, function(){
			highLevelConsumer2.close();
			process.exit();
		})
		highLevelConsumer2.on('error', function(error){
			console.log('closed consumer error', error)
		})
	});
});

// setTimeout(function(){
// 	highLevelConsumer.close()
// }, 50000)


// var topics = [
// 		{topic: topic, partition: 2},
//         {topic: topic, partition: 1},
//         {topic: topic, partition: 0}
//     ],
//     options = { autoCommit: false, fetchMaxWaitMs: 1000, fetchMaxBytes: 1024*1024 };

// var consumer = new kafka.Consumer(client, topics, options);
// var offset = new kafka.Offset(client);

// consumer.on('message', function (message) {
//     console.log(message);
// });

// consumer.on('error', function (err) {
//     console.log('error', err);
// });

// /*
// * If consumer get `offsetOutOfRange` event, fetch data from the smallest(oldest) offset
// */
// consumer.on('offsetOutOfRange', function (topic) {
//     topic.maxNum = 2;
//     offset.fetch([topic], function (err, offsets) {
//         var min = Math.min.apply(null, offsets[topic.topic][topic.partition]);
//         consumer.setOffset(topic.topic, topic.partition, min);
//     });
// });